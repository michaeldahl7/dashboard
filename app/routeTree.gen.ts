/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as PublicImport } from './routes/_public'
import { Route as AuthedImport } from './routes/_authed'
import { Route as IndexImport } from './routes/index'
import { Route as PublicTermsImport } from './routes/_public/terms'
import { Route as PublicSignupImport } from './routes/_public/signup'
import { Route as PublicLoginImport } from './routes/_public/login'
import { Route as PublicDpaImport } from './routes/_public/dpa'
import { Route as AuthedSettingsImport } from './routes/_authed/settings'
import { Route as AuthedDashboardImport } from './routes/_authed/dashboard'
import { Route as AuthedLocationsIndexImport } from './routes/_authed/locations/index'
import { Route as AuthedItemsIndexImport } from './routes/_authed/items/index'

// Create/Update Routes

const PublicRoute = PublicImport.update({
  id: '/_public',
  getParentRoute: () => rootRoute,
} as any)

const AuthedRoute = AuthedImport.update({
  id: '/_authed',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const PublicTermsRoute = PublicTermsImport.update({
  id: '/terms',
  path: '/terms',
  getParentRoute: () => PublicRoute,
} as any)

const PublicSignupRoute = PublicSignupImport.update({
  id: '/signup',
  path: '/signup',
  getParentRoute: () => PublicRoute,
} as any)

const PublicLoginRoute = PublicLoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => PublicRoute,
} as any)

const PublicDpaRoute = PublicDpaImport.update({
  id: '/dpa',
  path: '/dpa',
  getParentRoute: () => PublicRoute,
} as any)

const AuthedSettingsRoute = AuthedSettingsImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => AuthedRoute,
} as any)

const AuthedDashboardRoute = AuthedDashboardImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => AuthedRoute,
} as any)

const AuthedLocationsIndexRoute = AuthedLocationsIndexImport.update({
  id: '/locations/',
  path: '/locations/',
  getParentRoute: () => AuthedRoute,
} as any)

const AuthedItemsIndexRoute = AuthedItemsIndexImport.update({
  id: '/items/',
  path: '/items/',
  getParentRoute: () => AuthedRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/_authed': {
      id: '/_authed'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthedImport
      parentRoute: typeof rootRoute
    }
    '/_public': {
      id: '/_public'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof PublicImport
      parentRoute: typeof rootRoute
    }
    '/_authed/dashboard': {
      id: '/_authed/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof AuthedDashboardImport
      parentRoute: typeof AuthedImport
    }
    '/_authed/settings': {
      id: '/_authed/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof AuthedSettingsImport
      parentRoute: typeof AuthedImport
    }
    '/_public/dpa': {
      id: '/_public/dpa'
      path: '/dpa'
      fullPath: '/dpa'
      preLoaderRoute: typeof PublicDpaImport
      parentRoute: typeof PublicImport
    }
    '/_public/login': {
      id: '/_public/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof PublicLoginImport
      parentRoute: typeof PublicImport
    }
    '/_public/signup': {
      id: '/_public/signup'
      path: '/signup'
      fullPath: '/signup'
      preLoaderRoute: typeof PublicSignupImport
      parentRoute: typeof PublicImport
    }
    '/_public/terms': {
      id: '/_public/terms'
      path: '/terms'
      fullPath: '/terms'
      preLoaderRoute: typeof PublicTermsImport
      parentRoute: typeof PublicImport
    }
    '/_authed/items/': {
      id: '/_authed/items/'
      path: '/items'
      fullPath: '/items'
      preLoaderRoute: typeof AuthedItemsIndexImport
      parentRoute: typeof AuthedImport
    }
    '/_authed/locations/': {
      id: '/_authed/locations/'
      path: '/locations'
      fullPath: '/locations'
      preLoaderRoute: typeof AuthedLocationsIndexImport
      parentRoute: typeof AuthedImport
    }
  }
}

// Create and export the route tree

interface AuthedRouteChildren {
  AuthedDashboardRoute: typeof AuthedDashboardRoute
  AuthedSettingsRoute: typeof AuthedSettingsRoute
  AuthedItemsIndexRoute: typeof AuthedItemsIndexRoute
  AuthedLocationsIndexRoute: typeof AuthedLocationsIndexRoute
}

const AuthedRouteChildren: AuthedRouteChildren = {
  AuthedDashboardRoute: AuthedDashboardRoute,
  AuthedSettingsRoute: AuthedSettingsRoute,
  AuthedItemsIndexRoute: AuthedItemsIndexRoute,
  AuthedLocationsIndexRoute: AuthedLocationsIndexRoute,
}

const AuthedRouteWithChildren =
  AuthedRoute._addFileChildren(AuthedRouteChildren)

interface PublicRouteChildren {
  PublicDpaRoute: typeof PublicDpaRoute
  PublicLoginRoute: typeof PublicLoginRoute
  PublicSignupRoute: typeof PublicSignupRoute
  PublicTermsRoute: typeof PublicTermsRoute
}

const PublicRouteChildren: PublicRouteChildren = {
  PublicDpaRoute: PublicDpaRoute,
  PublicLoginRoute: PublicLoginRoute,
  PublicSignupRoute: PublicSignupRoute,
  PublicTermsRoute: PublicTermsRoute,
}

const PublicRouteWithChildren =
  PublicRoute._addFileChildren(PublicRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '': typeof PublicRouteWithChildren
  '/dashboard': typeof AuthedDashboardRoute
  '/settings': typeof AuthedSettingsRoute
  '/dpa': typeof PublicDpaRoute
  '/login': typeof PublicLoginRoute
  '/signup': typeof PublicSignupRoute
  '/terms': typeof PublicTermsRoute
  '/items': typeof AuthedItemsIndexRoute
  '/locations': typeof AuthedLocationsIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '': typeof PublicRouteWithChildren
  '/dashboard': typeof AuthedDashboardRoute
  '/settings': typeof AuthedSettingsRoute
  '/dpa': typeof PublicDpaRoute
  '/login': typeof PublicLoginRoute
  '/signup': typeof PublicSignupRoute
  '/terms': typeof PublicTermsRoute
  '/items': typeof AuthedItemsIndexRoute
  '/locations': typeof AuthedLocationsIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/_authed': typeof AuthedRouteWithChildren
  '/_public': typeof PublicRouteWithChildren
  '/_authed/dashboard': typeof AuthedDashboardRoute
  '/_authed/settings': typeof AuthedSettingsRoute
  '/_public/dpa': typeof PublicDpaRoute
  '/_public/login': typeof PublicLoginRoute
  '/_public/signup': typeof PublicSignupRoute
  '/_public/terms': typeof PublicTermsRoute
  '/_authed/items/': typeof AuthedItemsIndexRoute
  '/_authed/locations/': typeof AuthedLocationsIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | ''
    | '/dashboard'
    | '/settings'
    | '/dpa'
    | '/login'
    | '/signup'
    | '/terms'
    | '/items'
    | '/locations'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | ''
    | '/dashboard'
    | '/settings'
    | '/dpa'
    | '/login'
    | '/signup'
    | '/terms'
    | '/items'
    | '/locations'
  id:
    | '__root__'
    | '/'
    | '/_authed'
    | '/_public'
    | '/_authed/dashboard'
    | '/_authed/settings'
    | '/_public/dpa'
    | '/_public/login'
    | '/_public/signup'
    | '/_public/terms'
    | '/_authed/items/'
    | '/_authed/locations/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthedRoute: typeof AuthedRouteWithChildren
  PublicRoute: typeof PublicRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthedRoute: AuthedRouteWithChildren,
  PublicRoute: PublicRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/_authed",
        "/_public"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/_authed": {
      "filePath": "_authed.tsx",
      "children": [
        "/_authed/dashboard",
        "/_authed/settings",
        "/_authed/items/",
        "/_authed/locations/"
      ]
    },
    "/_public": {
      "filePath": "_public.tsx",
      "children": [
        "/_public/dpa",
        "/_public/login",
        "/_public/signup",
        "/_public/terms"
      ]
    },
    "/_authed/dashboard": {
      "filePath": "_authed/dashboard.tsx",
      "parent": "/_authed"
    },
    "/_authed/settings": {
      "filePath": "_authed/settings.tsx",
      "parent": "/_authed"
    },
    "/_public/dpa": {
      "filePath": "_public/dpa.tsx",
      "parent": "/_public"
    },
    "/_public/login": {
      "filePath": "_public/login.tsx",
      "parent": "/_public"
    },
    "/_public/signup": {
      "filePath": "_public/signup.tsx",
      "parent": "/_public"
    },
    "/_public/terms": {
      "filePath": "_public/terms.tsx",
      "parent": "/_public"
    },
    "/_authed/items/": {
      "filePath": "_authed/items/index.tsx",
      "parent": "/_authed"
    },
    "/_authed/locations/": {
      "filePath": "_authed/locations/index.tsx",
      "parent": "/_authed"
    }
  }
}
ROUTE_MANIFEST_END */

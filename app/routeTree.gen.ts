/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as TermsImport } from './routes/terms'
import { Route as SignupImport } from './routes/signup'
import { Route as LoginImport } from './routes/login'
import { Route as DpaImport } from './routes/dpa'
import { Route as AuthedImport } from './routes/_authed'
import { Route as IndexImport } from './routes/index'
import { Route as AuthedDashboardImport } from './routes/_authed/dashboard'
import { Route as AuthedUsernameImport } from './routes/_authed/$username'
import { Route as AuthedOnboardingInventoryImport } from './routes/_authed/onboarding/inventory'
import { Route as AuthedOnboardingHouseImport } from './routes/_authed/onboarding/house'
import { Route as AuthedUsernameSettingsImport } from './routes/_authed/$username.settings'

// Create/Update Routes

const TermsRoute = TermsImport.update({
  id: '/terms',
  path: '/terms',
  getParentRoute: () => rootRoute,
} as any)

const SignupRoute = SignupImport.update({
  id: '/signup',
  path: '/signup',
  getParentRoute: () => rootRoute,
} as any)

const LoginRoute = LoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const DpaRoute = DpaImport.update({
  id: '/dpa',
  path: '/dpa',
  getParentRoute: () => rootRoute,
} as any)

const AuthedRoute = AuthedImport.update({
  id: '/_authed',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const AuthedDashboardRoute = AuthedDashboardImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => AuthedRoute,
} as any)

const AuthedUsernameRoute = AuthedUsernameImport.update({
  id: '/$username',
  path: '/$username',
  getParentRoute: () => AuthedRoute,
} as any)

const AuthedOnboardingInventoryRoute = AuthedOnboardingInventoryImport.update({
  id: '/onboarding/inventory',
  path: '/onboarding/inventory',
  getParentRoute: () => AuthedRoute,
} as any)

const AuthedOnboardingHouseRoute = AuthedOnboardingHouseImport.update({
  id: '/onboarding/house',
  path: '/onboarding/house',
  getParentRoute: () => AuthedRoute,
} as any)

const AuthedUsernameSettingsRoute = AuthedUsernameSettingsImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => AuthedUsernameRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/_authed': {
      id: '/_authed'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthedImport
      parentRoute: typeof rootRoute
    }
    '/dpa': {
      id: '/dpa'
      path: '/dpa'
      fullPath: '/dpa'
      preLoaderRoute: typeof DpaImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/signup': {
      id: '/signup'
      path: '/signup'
      fullPath: '/signup'
      preLoaderRoute: typeof SignupImport
      parentRoute: typeof rootRoute
    }
    '/terms': {
      id: '/terms'
      path: '/terms'
      fullPath: '/terms'
      preLoaderRoute: typeof TermsImport
      parentRoute: typeof rootRoute
    }
    '/_authed/$username': {
      id: '/_authed/$username'
      path: '/$username'
      fullPath: '/$username'
      preLoaderRoute: typeof AuthedUsernameImport
      parentRoute: typeof AuthedImport
    }
    '/_authed/dashboard': {
      id: '/_authed/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof AuthedDashboardImport
      parentRoute: typeof AuthedImport
    }
    '/_authed/$username/settings': {
      id: '/_authed/$username/settings'
      path: '/settings'
      fullPath: '/$username/settings'
      preLoaderRoute: typeof AuthedUsernameSettingsImport
      parentRoute: typeof AuthedUsernameImport
    }
    '/_authed/onboarding/house': {
      id: '/_authed/onboarding/house'
      path: '/onboarding/house'
      fullPath: '/onboarding/house'
      preLoaderRoute: typeof AuthedOnboardingHouseImport
      parentRoute: typeof AuthedImport
    }
    '/_authed/onboarding/inventory': {
      id: '/_authed/onboarding/inventory'
      path: '/onboarding/inventory'
      fullPath: '/onboarding/inventory'
      preLoaderRoute: typeof AuthedOnboardingInventoryImport
      parentRoute: typeof AuthedImport
    }
  }
}

// Create and export the route tree

interface AuthedUsernameRouteChildren {
  AuthedUsernameSettingsRoute: typeof AuthedUsernameSettingsRoute
}

const AuthedUsernameRouteChildren: AuthedUsernameRouteChildren = {
  AuthedUsernameSettingsRoute: AuthedUsernameSettingsRoute,
}

const AuthedUsernameRouteWithChildren = AuthedUsernameRoute._addFileChildren(
  AuthedUsernameRouteChildren,
)

interface AuthedRouteChildren {
  AuthedUsernameRoute: typeof AuthedUsernameRouteWithChildren
  AuthedDashboardRoute: typeof AuthedDashboardRoute
  AuthedOnboardingHouseRoute: typeof AuthedOnboardingHouseRoute
  AuthedOnboardingInventoryRoute: typeof AuthedOnboardingInventoryRoute
}

const AuthedRouteChildren: AuthedRouteChildren = {
  AuthedUsernameRoute: AuthedUsernameRouteWithChildren,
  AuthedDashboardRoute: AuthedDashboardRoute,
  AuthedOnboardingHouseRoute: AuthedOnboardingHouseRoute,
  AuthedOnboardingInventoryRoute: AuthedOnboardingInventoryRoute,
}

const AuthedRouteWithChildren =
  AuthedRoute._addFileChildren(AuthedRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '': typeof AuthedRouteWithChildren
  '/dpa': typeof DpaRoute
  '/login': typeof LoginRoute
  '/signup': typeof SignupRoute
  '/terms': typeof TermsRoute
  '/$username': typeof AuthedUsernameRouteWithChildren
  '/dashboard': typeof AuthedDashboardRoute
  '/$username/settings': typeof AuthedUsernameSettingsRoute
  '/onboarding/house': typeof AuthedOnboardingHouseRoute
  '/onboarding/inventory': typeof AuthedOnboardingInventoryRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '': typeof AuthedRouteWithChildren
  '/dpa': typeof DpaRoute
  '/login': typeof LoginRoute
  '/signup': typeof SignupRoute
  '/terms': typeof TermsRoute
  '/$username': typeof AuthedUsernameRouteWithChildren
  '/dashboard': typeof AuthedDashboardRoute
  '/$username/settings': typeof AuthedUsernameSettingsRoute
  '/onboarding/house': typeof AuthedOnboardingHouseRoute
  '/onboarding/inventory': typeof AuthedOnboardingInventoryRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/_authed': typeof AuthedRouteWithChildren
  '/dpa': typeof DpaRoute
  '/login': typeof LoginRoute
  '/signup': typeof SignupRoute
  '/terms': typeof TermsRoute
  '/_authed/$username': typeof AuthedUsernameRouteWithChildren
  '/_authed/dashboard': typeof AuthedDashboardRoute
  '/_authed/$username/settings': typeof AuthedUsernameSettingsRoute
  '/_authed/onboarding/house': typeof AuthedOnboardingHouseRoute
  '/_authed/onboarding/inventory': typeof AuthedOnboardingInventoryRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | ''
    | '/dpa'
    | '/login'
    | '/signup'
    | '/terms'
    | '/$username'
    | '/dashboard'
    | '/$username/settings'
    | '/onboarding/house'
    | '/onboarding/inventory'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | ''
    | '/dpa'
    | '/login'
    | '/signup'
    | '/terms'
    | '/$username'
    | '/dashboard'
    | '/$username/settings'
    | '/onboarding/house'
    | '/onboarding/inventory'
  id:
    | '__root__'
    | '/'
    | '/_authed'
    | '/dpa'
    | '/login'
    | '/signup'
    | '/terms'
    | '/_authed/$username'
    | '/_authed/dashboard'
    | '/_authed/$username/settings'
    | '/_authed/onboarding/house'
    | '/_authed/onboarding/inventory'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthedRoute: typeof AuthedRouteWithChildren
  DpaRoute: typeof DpaRoute
  LoginRoute: typeof LoginRoute
  SignupRoute: typeof SignupRoute
  TermsRoute: typeof TermsRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthedRoute: AuthedRouteWithChildren,
  DpaRoute: DpaRoute,
  LoginRoute: LoginRoute,
  SignupRoute: SignupRoute,
  TermsRoute: TermsRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/_authed",
        "/dpa",
        "/login",
        "/signup",
        "/terms"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/_authed": {
      "filePath": "_authed.tsx",
      "children": [
        "/_authed/$username",
        "/_authed/dashboard",
        "/_authed/onboarding/house",
        "/_authed/onboarding/inventory"
      ]
    },
    "/dpa": {
      "filePath": "dpa.tsx"
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/signup": {
      "filePath": "signup.tsx"
    },
    "/terms": {
      "filePath": "terms.tsx"
    },
    "/_authed/$username": {
      "filePath": "_authed/$username.tsx",
      "parent": "/_authed",
      "children": [
        "/_authed/$username/settings"
      ]
    },
    "/_authed/dashboard": {
      "filePath": "_authed/dashboard.tsx",
      "parent": "/_authed"
    },
    "/_authed/$username/settings": {
      "filePath": "_authed/$username.settings.tsx",
      "parent": "/_authed/$username"
    },
    "/_authed/onboarding/house": {
      "filePath": "_authed/onboarding/house.tsx",
      "parent": "/_authed"
    },
    "/_authed/onboarding/inventory": {
      "filePath": "_authed/onboarding/inventory.tsx",
      "parent": "/_authed"
    }
  }
}
ROUTE_MANIFEST_END */
